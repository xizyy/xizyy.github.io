{"pages":[{"title":"404","text":"","path":"404/index.html","date":"10-28","excerpt":""},{"title":"就这么几篇你还要分类？？？","text":"","path":"categories/index.html","date":"10-28","excerpt":""},{"title":"标签有什么好看的","text":"","path":"tags/index.html","date":"10-28","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"10-28","excerpt":""},{"title":"萌新一个","text":"","path":"about/index.html","date":"10-28","excerpt":""}],"posts":[{"title":"你真的会配IP吗？","text":"提问：两个不同网段的主机直连能ping通吗？这么简单的问题还用问吗？答案当然是不能！ 好，那么本文到此就结束了，谢—–才怪！ 在不加任何设备，不改IP的情况下有没有可能ping通？ 当然有，这就是这篇文章存在的原因。在windows的情况下很简单。怎么做呢？ 怎么可能这么快就说出来！ 本文主要探讨的是linux的情况下如何做。并且目的在于让读者对底层的网络原理有更深的了解。能够应付大部分的网络疑难杂证。 #####现在要再次提问！ 网关和主机一定要在同一个网段吗？网关和主机之间可以间隔设备吗？通信过程中物理链路上到底发生了什么？直连的两台linux之间发生了什么？先来了解一下当ping命令发出时会发生些什么。 要深入理解这个问题，首先要搞清楚网络通讯的原理，网络上通讯工作在物理层和数据链路层，源地址和目标地址是通过源和目的的mac地址进行通讯的。当源主机访问目标主机时，首先看两者的IP在不在同一网段，结果是：1 两者在同一网段，就会直接把包发向目标IP，这时要做：1.1 查本地arp缓存，看看是否有IP和Mac的对应表：1.1.1 有，直接向链路上发包，包中包括原mac及目标mac。1.1.2 没有，则向网络发arp广播，用来查找与目标IP对应的mac地址（ARP发送的是广播数据，电缆上的每个以太网接口都要接收广播的数据帧，并且数据不会越过IP层，即所有的广播只会广播到与自己有物理链路直连，不跨设备的以太网接口上。（请不要拿交换机来抬杠，不接受抬杠！）而接受方收到之后会解包，将IP与自身拥有的IP对比，如果不是自己则丢弃，是则会根据包中的MAC地址发送arp相应包，由此告知对方自己的MAC地址）。1.1.2.1 如果查到了，则向网络发包。1.1.2.2 没查到，则不通讯。2 两者不在同一网段，则把目标地址转为网关地址（也就是向网关发包）2.1 查找本地arp缓存，看看是否有网关Mac2.1.1 有，向网关发送数据包2.1.2 没有，则向网络发送ARP广播，以获取路由表中指定的网关ip的MAC地址。2.1.2.1 找到，发包2.1.2.2 没找到，放弃由此可以看出，物理链路上的通信实际上是根据MAC地址来实现的。源主机寻找网关的过程中，并不会检查两者是不是同一网段，而是直接发送arp，这就是为什么设置网关不用设置子网掩码。网关必须与源主机有物理链路上的直连。 那么两台直连的liunx物理链路都连上了凭什么不能通信。事实上从上面的描述已经很容易推出，A和B之间只需要互指对方IP为网关就可以通信了。 结论基本已经出来了，在windows上确实可以直接简单互指网关进行通信。但是在linux上却有一个坑。 linux挖的坑假设A的ip是192.168.1.101,B的ip是192.168.2.102当两台linux以不同网段直连时，通过查看路由表route -n可以看到当前的路由表情况。如果你的linux是DHCP模式，你会发现他们的路由表都是只有一条，即本机的网段如：192.168.1.0 的下一跳指向0.0.0.0即他们都没有网关。 这时候可以尝试直接配路由表route add -net 192.168.2.0/24 gw 192.168.2.102 你会发现配不了，因为网关和本机不在同一个网段上 这时候呢需要用到下面这条命令ip route add 192.168.2.0/24 via 192.168.2.102 dev eth0 onlink这是新的iproute2下的命令，现在的linux一般都有iproute2包。其中via 代表下一跳 ， dev 代表使用 eth0 网卡 ，onlink是一个参数。onlink参数的作用：使用这个参数将会告诉内核，不必检查网关是否可达。因为在linux内核中，网关与本地的网段不同是被认为不可达的，从而拒绝执行添加路由的操作。 事实上，如果你配置静态IP就没这么多花里胡哨的事了。因为静态IP直接通过改文件来执行，并不会经过内核的检测。 一个有趣的延伸当你把A的IP改成 192.168.1.101/32 时，你无法通过任何正常的方法与其他主机通信，因为这里不属于任何网段，但是你可以通过上面的方式来进行物理链路上的直连。","path":"2018/10/30/onlink/","date":"10-30","excerpt":""},{"title":"用hexo搭建博客","text":"两天前想着是时候开始写个博客了，于是比较了一下现在的各种博客的平台，最后还是决定使用github+hexo组合来写自己的博客。 在搭建博客的过程中呢也是遇到了一点小麻烦，花了点时间。虽然本文也会涉及一点git和github，但是大概git和github的使用网上大多都比我详细且简单易懂吧，就着重写写hexo搭建博客的过程来当作第一篇博文吧。 Git与github的区别:git和github是两个不同的东西，因为两个经常一起使用，所以很容易有人搞混。事实上呢，git是一个管理代码的软件，而github则是一个网站。 前期准备：由于我使用的是linux系统，所以下面也是使用的linux系统 1.安装git和Node.js:git是一款能对代码进行，保存快照，版本更新，还原代码的软件，在代码开发里十分普及。Node.js则是运行javascript的必备环境，而javascript是接下来一定会用到的。打开终端先查看系统是否已经安装了git和node：12git --versionnode -v 如果出现了版本信息则是安装了，不过最好还是确认下有没有安装到最新版本：12apt-get install gitapt-get install nodejs 2.安装hexo:前两个安装好后就开始按照hexo：12sudo npm install -g hexosudo npm install hexo --save 此处的npm在nodejs安装包里包含 3.注册github:github页面虽然全是英文，但是也不算很难的单词。而且通过谷歌的页面翻译也可以很简单的注册。创建名为 用户名.github.io的存储库。进入仓库后在seting里配置github page，这就是网页名。如果仓库名不是上面的格式此处必须设置为上面的格式。 到此前期准备基本完成，开始来建立我们的博客 搭建博客通过hexo来建立一个博客模板：sudo hexo init blogblog为包名 进入blog目录cd blog 在blog目录中安装名为blognode_modules的依赖项。npm install 到此处，博客模板已经搭建完 可以先在本地尝试浏览一下博客页面hexo server然后在浏览器里访问 127.0.0.1:4000就可以看到博客页面了。 将博客放到网页上打开blog目录下的_config.yml文件拉到末尾在deploy那里修改成下面这个样子1234deploy: type: git repository: https://github.com/用户名/用户名.github.io.git branch: master 然后执行下列命令12hexo g #生成博客页面hexo d #发布到github 输入用户名及密码之后就发布成功了 ##修改主题 主题可以在hexo官网里找具体的修改方法主题的发布作者一般会作说明，这里不再赘述。那么本文就到此为止了","path":"2018/10/29/hexo/","date":"10-29","excerpt":""}]}